jobs:
- job: Build_Electron_via_GN
  timeoutInMinutes: 180
  steps:
  - bash: |
      export PATH="$PATH:/Users/electron/depot_tools"
      echo "##vso[task.setvariable variable=PATH]$PATH"
      echo $PATH
      export GIT_CACHE_PATH="/Users/electron/libcc_cache"
      set -ex
      gclient config \
        --name "src/electron" \
        --unmanaged \
        "https://github.com/electron/electron"
      mkdir src
      git clone https://github.com/electron/electron src/electron
      # TODO: there's a subtle race condition here in that if you push two
      # commits to $BUILD_SOURCEBRANCH in quick succession, it's possible that
      # fetching the BUILD_SOURCEBRANCH ref will not actually fetch the
      # BUILD_SOURCEVERSION commit, and so the checkout will fail. Find a
      # better solution for checking out the commit to be built.
      (cd src/electron; git fetch origin +"${BUILD_SOURCEBRANCH}"; git checkout "${BUILD_SOURCEVERSION}")
      gclient sync --with_branch_heads --with_tags
      cd src
      export CHROMIUM_BUILDTOOLS_PATH=`pwd`/buildtools
      echo "##vso[task.setvariable variable=CHROMIUM_BUILDTOOLS_PATH]`pwd`/buildtools"
    name: gclient_sync

  - bash: |
      cd src
      export SCCACHE_WRAPPER="`pwd`/electron/external_binaries/sccache"
      "$SCCACHE_WRAPPER" --start-server
      echo "##vso[task.setvariable variable=SCCACHE_WRAPPER]$SCCACHE_WRAPPER"
      "$SCCACHE_WRAPPER" -s
      echo "GN gen for: $GN_CONFIG"
      gn gen out/Default --args='import("'$GN_CONFIG'") cc_wrapper="'"$SCCACHE_WRAPPER"'"'" $GN_EXTRA_ARGS"
    name: GN_gen_with_sccache
    condition: and(succeeded(), ne(variables['ELECTRON_RELEASE'], '1'))

  - bash: |
      cd src
      echo "GN gen for: $GN_CONFIG"
      gn gen out/Default --args='import("'$GN_CONFIG'")'" $GN_EXTRA_ARGS"
    name: GN_gen_without_sccache
    condition: and(succeeded(), eq(variables['ELECTRON_RELEASE'], '1'))

  - bash: |
      cd src
      ninja -C out/Default electron:electron_app
    name: Ninja_build

  - bash: |
      "$SCCACHE_WRAPPER" -s
      "$SCCACHE_WRAPPER" --stop-server
    name: Check_sccache_stats
    condition: and(succeeded(), ne(variables['ELECTRON_RELEASE'], '1'))

  - bash: |
      set +e
      cd src
      ninja -C out/Default third_party/electron_node:headers
      export npm_config_nodedir="$PWD/out/Default/gen/node_headers"
      (cd electron/spec && npm install)
      ./out/Default/Electron.app/Contents/MacOS/Electron electron/spec --ci
    name: Test
    condition: and(succeeded(), eq(variables['RUN_TESTS'], '1'))

  - bash: |
      cd src
      ninja -C out/Default electron:electron_dist_zip
    name: Build_dist_zip
    condition: and(succeeded(), eq(variables['ELECTRON_RELEASE'], '1'))

  - task: PublishTestResults@2
    displayName: Publish Test Results
    inputs:
      testResultsFiles: '**/test-*.xml'
    condition: and(always(), eq(variables['MOCHA_FILE'], 'junit/test-results.xml'), eq(variables['RUN_TESTS'], '1'))

  - task: PublishBuildArtifacts@1
    displayName: Publish Build Artifacts
    inputs:
      PathtoPublish: '$(Build.SourcesDirectory)/out/Default/dist.zip'
      ArtifactName: dist.zip
    condition: and(succeeded(), eq(variables['ELECTRON_RELEASE'], '1'))

  - bash: |
      export BUILD_URL="${SYSTEM_TEAMFOUNDATIONCOLLECTIONURI}${SYSTEM_TEAMPROJECT}/_build/results?buildId=${BUILD_BUILDID}"
      export MESSAGE="Build failed for *<$BUILD_URL|$BUILD_DEFINITIONNAME>* nightly build."
      curl -g -H "Content-Type: application/json" -X POST \
      -d "{\"text\": \"$MESSAGE\", \"attachments\": [{\"color\": \"#FC5C3C\",\"title\": \"$BUILD_DEFINITIONNAME nightly build results\",\"title_link\": \"$BUILD_URL\"}]}" $(slack_webhook)
    name: Post_Slack_Notification_on_Failure
    condition: and(failed(), eq(variables['NOTIFY_SLACK'], '1'))

  - bash: |
      export BUILD_URL="${SYSTEM_TEAMFOUNDATIONCOLLECTIONURI}${SYSTEM_TEAMPROJECT}/_build/results?buildId=${BUILD_BUILDID}"
      export MESSAGE="Build succeeded for *<$BUILD_URL|$BUILD_DEFINITIONNAME>* nightly build."
      curl -g -H "Content-Type: application/json" -X POST \
      -d "{\"text\": \"$MESSAGE\", \"attachments\": [{\"color\": \"good\",\"title\": \"$BUILD_DEFINITIONNAME nightly build results\",\"title_link\": \"$BUILD_URL\"}]}" $(slack_webhook)
    name: Post_Slack_Notification_on_Success
    condition: and(succeeded(), eq(variables['NOTIFY_SLACK'], '1'))
